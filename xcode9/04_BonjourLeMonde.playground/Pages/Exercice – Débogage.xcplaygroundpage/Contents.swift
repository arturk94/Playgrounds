/*:
 ## ExerciceÂ â€“ DÃ©bogage
 
 Vous aurez parfois besoin dâ€™ajouter des instructions `print` temporaires pour comprendre pourquoi votre programme ne fonctionne pas.
 
 La console est le plus souvent utilisÃ©e pour rechercher des _bugs_, autrement dit des problÃ¨mes dans le code. Les programmeurs passent un temps considÃ©rable Ã  travailler sur des blocs de code qui ne fonctionnent pas encore. Si tout fonctionnait comme ils le voulaient, ils nâ€™auraient plus besoin de sâ€™en occuper.

 Dans cet exercice, vous allez dÃ©boguer du code Ã©crit par un autre programmeur. Bonne chanceÂ !
 
 >  (Remarque)Â : \
 Affichez la console et masquez la barre de rÃ©sultat. Vous aurez lâ€™occasion dâ€™effectuer des dÃ©bogages Ã  lâ€™aide de la barre de rÃ©sultat plus tard dans le cours.

 
 - callout(Experiment: Pseudo-personalization):
 (ExpÃ©rienceÂ : pseudopersonnalisation): \
Imaginez que vos amis aient fait quelque chose qui vous a beaucoup choquÃ©, et que vous dÃ©cidiez dâ€™envoyer un message personnalisÃ© Ã  chacun dâ€™entre eux pour expliquer votre ressenti. Comme vous nâ€™avez pas le temps dâ€™Ã©crire les messages un par un, vous crÃ©ez un programme capable de les gÃ©nÃ©rer. Une fois le programme fonctionnel, vous Ãªtes Ã  peu prÃ¨s sÃ»r de pouvoir vous contenter de changer la variable `name` et de copier-coller votre rÃ©action Â«Â pseudopersonnalisÃ©eÂ Â» pour lâ€™envoyer Ã  chacun de vos amis. */
// -------------- ğŸ‘‡ Le code que vous devez corriger est en dessous de cette ligne ğŸ‘‡ --------------------


let questionWord = "WHY"
let connectorWord = "but"
let question = "\(connectorWord) \\(questionWord)?"

let incessantQuestion = "\(question)\(question)\(question)\(question)"

let name = "Kim"
let summons = "\(name) \(name). \(name)!"

let botheration = "\(summons)\(incessantQuestion)"


// -------------- ğŸ‘† Le code que vous devez corriger est au-dessus de cette ligne ğŸ‘† --------------------
//: Malheureusement, ce programme contient un bug. Suivez les consignes pour trouver et corriger lâ€™erreur.
// -------------- ğŸ‘‡ Ajoutez vos instructions print sous cette ligne ğŸ‘‡ --------------------




/*:

 1. Ã‰crivez la constante `botheration` de la maniÃ¨re suivanteÂ :
 ```
(Exemple)Â :
 print(botheration)
 ```

 Pour le moment, votre rÃ©sultat ne ressemble pas au texte dâ€™un message classique. Il contient des signes de ponctuation incongrus ainsi que des parties ressemblant Ã  du code. Pour y remÃ©dier, vous pourriez lire le code attentivement et modifier ce quâ€™il faut pour obtenir le rÃ©sultat escomptÃ©. Toutefois, il sera bien plus simple dâ€™examiner certaines des constantes intermÃ©diaires du code.
 

 2. Ajoutez des instructions `print` supplÃ©mentaires pour vÃ©rifier les constantes intermÃ©diaires, comme `question`.
 3. Lorsque vous avez dÃ©terminÃ© quelles lignes provoquaient des erreurs, corrigez-les de haut en bas. (RafraÃ®chissez-vous la mÃ©moire avec lâ€™aire de jeux ChaÃ®nes si vous avez des doutes.) Continuez Ã  vÃ©rifier votre console pour vous assurer que les constantes intermÃ©diaires sont correctes, et nâ€™hÃ©sitez pas Ã  supprimer ou Ã  marquer en commentaire les instructions `print` dont vous nâ€™avez plus besoin.

 4. Lorsque les chaÃ®nes finales ressemblent davantage Ã  un message Ã©crit par un humain que par un ordinateur, amusez-vous Ã  manipuler les constantes pour crÃ©er votre messageÂ :
	* Modifiez les constantes de chaÃ®ne `questionWord`, `connectorWord` et `name` en leur affectant de nouvelles valeurs.
	* Modifiez `question`, `incessantQuestion` et `summons` pour changer lâ€™agencement des autres constantes. Vous pouvez utiliser plus de rÃ©pÃ©titions, moins de rÃ©pÃ©titions, ou mÃªme ajouter des phrases de votre crÃ©ation.
 
[PrÃ©cÃ©dent](@previous)  |  page 10 sur 11  |  [SuivantÂ : ExerciceÂ â€“ Lâ€™app Console](@next)
 */
