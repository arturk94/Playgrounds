/*:
 ## Un code sÃ»r dans un environnement changeant
 Pourquoi perdre du temps avec les constantes alors que lâ€™on peut se contenter dâ€™utiliser des variablesÂ ? Nâ€™est-il pas prÃ©fÃ©rable dâ€™utiliser des variables, puisquâ€™on peut les modifier quand bon nous sembleÂ ?

Non.

Il vous arrivera dâ€™Ã©crire du code qui attendra de son environnement un comportement bien prÃ©cis. Imaginez que vous demandiez Ã  un ami ce quâ€™il veut boire, puis que vous vous donniez beaucoup de mal pour rÃ©pondre Ã  sa requÃªte.*/
var friendBeverageChoice = "cafÃ©"

driveAcrossTown()
buyACoffeeMaker()
/*:Selon la durÃ©e pendant laquelle vous vous Ãªtes absentÃ©, vous ne pouvez pas savoir si votre ami aura ou non changÃ© dâ€™avis dâ€™ici Ã  ce que vous reveniez.*/
friendBeverageChoice = "thÃ©"

findCoffeeGrinder()

friendBeverageChoice = "eau"
friendBeverageChoice = "eau gazeuse"
friendBeverageChoice = "eau plate"

findCoffeeBeans()
driveHome()
setUpCoffeeGrinder()

friendBeverageChoice = "rien ğŸ˜´"

grindBeans()
makeFriendDrinkCoffee()
/*:
 Vous pourriez vous retrouver Ã  sonner chez votre ami Ã  3Â heures du matin en lui proposant gentiment de se lever pour venir boire son cafÃ©. Cela Ã©nerverait votre ami, et vous seriez dÃ©Ã§u. Lâ€™envie de cafÃ© de votre ami est variable. Vous ne pouvez pas agir comme si elle Ã©tait constante.

 Les variables dans votre code rÃ©pondent Ã  la mÃªme problÃ©matique. Si vous ne vÃ©rifiez pas souvent leur valeur puis vous lancez dans une tÃ¢che volumineuse nÃ©cessitant que cette valeur reste fixe, vous pourriez vous retrouver Ã  travailler pour rien ou Ã  avoir tout faux.
 - callout(Experiment):
(ExpÃ©rience)Â :\
Faites passer `friendBeverageChoice` dâ€™une `var` Ã  une constante `let`, et regardez toutes les erreurs qui apparaissent sur la page. Vous avez deux maniÃ¨res de corriger ce code.\
Vous pouvez laisser `friendBeverageChoice` sous forme de constante `let` et supprimer toutes les lignes lui attribuant une valeur diffÃ©rente.\
Ou vous pouvez changer `friendBeverageChoice` en variable `var` et supprimer toutes les lignes dont vous nâ€™Ãªtes pas sÃ»r dâ€™avoir besoin, par exemple `setUpCoffeeGrinder()`.\
Si vous choisissez la deuxiÃ¨me option, votre programme risque de ne pas Ãªtre trÃ¨s utile.
 
 Comment faire pour mÃ©langer constantes et variablesÂ ?
 
[PrÃ©cÃ©dent](@previous)  |  page 9 sur 13  |  [SuivantÂ : Un code sÃ»r dans un environnement inconnu](@next)
*/

